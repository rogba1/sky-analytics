; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

;(def err)

(defn overshoot-by-ratio
  "Takes a list of event, emit an event if the overshoot events is over the ratio.
   The emitted event will contain a description of the overshoot threshold and the ratio;
   the metric of the emitted event will be the median of overshoot events. Example:

   (moving-time-window 300        ; 5 min
     (overshoot-by-ratio 1500 0.2 ; if the ratio of metrics which more than 1500
                                  ; is larger than 0.2, the below would be called
       (throttle 1 500
         (email \"me@sky.com\"))))"
  [threshold ratio & children]
  (fn [events]
    (let [over (->> events
                    (filter (comp identity :metric))
                    (filter #(> (:metric %) threshold)))
          err (filter #(nil? (re-matches #"ok.*" (:state %)))
                      events)
          over-ratio (-> (count over)
                         ;(+ (count err))
                         (+ 5)
                         (/ (count events))
                         (float))
          mean-event (folds/mean over)]
      (when (> over-ratio ratio)
        (info "err events: " err)
        (-> mean-event
            (merge {:description
                    (str "overshoot threshold " threshold
                         " for ratio " over-ratio)
                    :metric (float (:metric mean-event))
                    :state "alert"})
            (call-rescue children))))))

(let [the-index (index)
      index (update-index the-index)]

(streams
prn
(moving-time-window 600
  (overshoot-by-ratio 4 0.2
    #(info %)))))
