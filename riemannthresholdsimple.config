; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [my-index (index)

      ; Let's also define a stream that feeds states into this index. We'll
      ; call it index for short.

      index (update-index my-index)]
      
  ; Inbound events will be passed to these streams:
   (streams
   
   prn
   
   (default :ttl 60
     ;; Index all events immediately.
     index

Alerts when a metric goes out of bounds. Where the metric falls between ten and five, update index    with state "ok" else index with "warning":

(where (and (not (nil? metric)) (< 5 metric 10))
   (with :state "ok" index)
    (else
      (with :state "warning" index)))
      
     ;; Log expired events.
     (expired
      (fn [event] (info "expired" event)))))
      
)


